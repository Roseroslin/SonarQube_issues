package com.manulife.cmtravel.helpers;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.manulife.cmtravel.cache.Cacheable;
import com.manulife.cmtravel.helpers.Runnable;

public class ThreadHelper implements Runnable{
	private static HashMap cacheHashMap = new HashMap();
	private static final Logger LOGGER = LoggerFactory.getLogger(ThreadHelper.class);
	final int milliSecondSleepTime = 5000;
	
	public ThreadHelper(Cacheable object) {		
		cacheHashMap.put(object.getIdentifier(), object);
		}	
	
	@Override
	public void run() 
	{
		try {
			while (!Thread.interrupted()) {
				Set keySet = cacheHashMap.keySet();
				Iterator keys = keySet.iterator();
				removeCacheKey(keys);
				Thread.sleep(milliSecondSleepTime);
			}
		} catch (InterruptedException e) {
			LOGGER.error("Error: {}", e.getMessage());
			Thread.currentThread().interrupt();
		}
		return;
	}
	
	/*public static void putCache(Cacheable object) {
		cacheHashMap.put(object.getIdentifier(), object);
	}*/
	
	private void removeCacheKey(Iterator keys) {
		while (keys.hasNext()) {
			Object key = keys.next();
			Cacheable value = (Cacheable) cacheHashMap.get(key);
			if (value.isExpired()) {
				cacheHashMap.remove(key);
			}
		}
	}
	
	public static Cacheable getCache(Object identifier) {
		Cacheable object = (Cacheable) cacheHashMap.get(identifier);
		if (object == null) {
			return null;
		}
		if (object.isExpired()) {
			cacheHashMap.remove(identifier);
			return null;
		} else {
			return object;
		}
	}
	
}
