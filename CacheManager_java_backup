package com.manulife.cmtravel.cache;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CacheManager {

	private static final Logger LOGGER = LoggerFactory.getLogger(CacheManager.class);
	private static HashMap cacheHashMap = new HashMap();
	//private static int SLEEP_TIME = 5000;

	private CacheManager() {
		// No-args constructor
	}
	static {
		final int milliSecondSleepTime = 5000;
		Thread threadCleanerUpper = new Thread(
				new Runnable() 
				{
					public void run() 
					{
						try {
							while (!Thread.interrupted()) {
								Set keySet = cacheHashMap.keySet();
								Iterator keys = keySet.iterator();
								removeCacheKey(keys);
								Thread.sleep(milliSecondSleepTime);
							}
						} catch (InterruptedException e) {
							LOGGER.error("Error: {}", e.getMessage());
							Thread.currentThread().interrupt();
						}
						return;
					}
					private void removeCacheKey(Iterator keys) {
						while (keys.hasNext()) {
							Object key = keys.next();
							Cacheable value = (Cacheable) cacheHashMap.get(key);
							if (value.isExpired()) {
								cacheHashMap.remove(key);
							}
						}
					}
				});
		threadCleanerUpper.setPriority(Thread.MIN_PRIORITY);
		threadCleanerUpper.start();
	}

	public static void putCache(Cacheable object) {
		cacheHashMap.put(object.getIdentifier(), object);
	}

	public static Cacheable getCache(Object identifier) {
		Cacheable object = (Cacheable) cacheHashMap.get(identifier);
		if (object == null) {
			return null;
		}
		if (object.isExpired()) {
			cacheHashMap.remove(identifier);
			return null;
		} else {
			return object;
		}
	}

	public static void clearCache() {
		cacheHashMap.clear();
	}
}
