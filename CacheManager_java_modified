package com.manulife.cmtravel.cache;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.manulife.cmtravel.helpers.ThreadHelper;
import com.manulife.cmtravel.cache.Cacheable;
public class CacheManager {

	private static final Logger LOGGER = LoggerFactory.getLogger(CacheManager.class);
	private static HashMap cacheHashMap = new HashMap();
	//private static int SLEEP_TIME = 5000;
	

	private CacheManager(Object identifier) {
		
		// No-args constructor
	}
	static {
		//final int milliSecondSleepTime = 5000;
		
		Thread threadCleanerUpper = new Thread(new ThreadHelper(getCache(identifier)));

				
				
						
													
		threadCleanerUpper.setPriority(Thread.MIN_PRIORITY);
		threadCleanerUpper.start();
	}

	/*public static void putCache(Cacheable object) {
		cacheHashMap.put(object.getIdentifier(), object);
	}*/

	public static Cacheable getCache(Object identifier) {
		Cacheable object = (Cacheable) cacheHashMap.get(identifier);
		if (object == null) {
			return null;
		}
		if (object.isExpired()) {
			cacheHashMap.remove(identifier);
			return null;
		} else {
			return object;
		}
	}

	public static void clearCache() {
		cacheHashMap.clear();
	}
}
